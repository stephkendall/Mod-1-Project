{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "https://www.imdb.com/title/tt0101627/?ref_=ttls_li_tt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "urls = ['https://www.imdb.com/title/tt0120338/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1375666/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1663202/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1853728/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0993846/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0264464/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1343092/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt7131622/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1130884/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0407887/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0338751/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0217505/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0120744/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0450259/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0117509/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0163978/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0758774/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt1616195/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0959337/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0114214/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0116999/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0108550/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0120533/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0108330/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0112461/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0105156/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0112654/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0109642/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0119004/?ref_=ttls_li_tt',\n",
    " 'https://www.imdb.com/title/tt0101627/?ref_=ttls_li_tt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "from urllib.request import urlopen as uReq\n",
    "import requests\n",
    "import lxml.html as lh\n",
    "import pandas as pd\n",
    "from urllib.request import urlopen\n",
    "from bs4 import BeautifulSoup \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_url = 'https://www.imdb.com/title/tt0120338/?ref_=ttls_li_tt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "requests.get('https://www.imdb.com/title/tt0101627/?ref_=ttls_li_tt').status_code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def opencodezscraping(urls):\n",
    "    for url in urls:\n",
    "        response= requests.get(url)\n",
    "        soup = BeautifulSoup(response.content,\"html.parser\")\n",
    "        soup_title= soup.findAll(\"h2\",{\"class\":\"title\"})\n",
    "        soup_para= soup.findAll(\"div\",{\"class\":\"post-content image-caption-format-1\"})\n",
    "        soup_date= soup.findAll(\"span\",{\"class\":\"thetime\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup as soup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https://www.imdb.com/title/tt0120338/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1375666/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1663202/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1853728/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0993846/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0264464/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1343092/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt7131622/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1130884/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0407887/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0338751/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0217505/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0120744/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0450259/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0117509/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0163978/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0758774/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt1616195/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0959337/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0114214/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0116999/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0108550/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0120533/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0108330/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0112461/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0105156/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0112654/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0109642/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0119004/?ref_=ttls_li_tt',\n",
       " 'https://www.imdb.com/title/tt0101627/?ref_=ttls_li_tt']"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "urls"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "tagcontent = []\n",
    "titlecontent = []\n",
    "for url in urls:\n",
    "    uClient = uReq(url)\n",
    "    pagehtml = uClient.read()\n",
    "    uClient.close()\n",
    "    s = soup(pagehtml,'html.parser')\n",
    "    title = s.find(\"meta\", property = \"og:title\")\n",
    "    lists_div =  s.find(\"div\", {\"class\": \"article highlighted\"})\n",
    "    if lists_div:\n",
    "        titlecontent.append(s.find(\"meta\", property=\"og:title\"))\n",
    "        tagcontent.append(lists_div.find(\"b\"))\n",
    "    else:\n",
    "        print(title[\"content\"] if title else \"No meta title given\")\n",
    "\n",
    "#dicts_oscar['title'] = titlecontent\n",
    "#dicts_oscar['oscar'] = tagcontent\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'title': None, 'oscar': 'None'}"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dicts_oscar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'title': ['Titanic (1997) - IMDb',\n",
       "  'Inception (2010) - IMDb',\n",
       "  'The Revenant (2015) - IMDb',\n",
       "  'Django Unchained (2012) - IMDb',\n",
       "  'The Wolf of Wall Street (2013) - IMDb',\n",
       "  'Catch Me If You Can (2002) - IMDb',\n",
       "  'The Great Gatsby (2013) - IMDb',\n",
       "  'Once Upon a Time in Hollywood (2019) - IMDb',\n",
       "  'Shutter Island (2010) - IMDb',\n",
       "  'The Departed (2006) - IMDb',\n",
       "  'The Aviator (2004) - IMDb',\n",
       "  'Gangs of New York (2002) - IMDb',\n",
       "  'The Man in the Iron Mask (1998) - IMDb',\n",
       "  'Blood Diamond (2006) - IMDb',\n",
       "  'Romeo + Juliet (1996) - IMDb',\n",
       "  'The Beach (2000) - IMDb',\n",
       "  'Body of Lies (2008) - IMDb',\n",
       "  'J. Edgar (2011) - IMDb',\n",
       "  'Revolutionary Road (2008) - IMDb',\n",
       "  'The Quick and the Dead (1995) - IMDb',\n",
       "  \"Marvin's Room (1996) - IMDb\",\n",
       "  \"What's Eating Gilbert Grape (1993) - IMDb\",\n",
       "  'Celebrity (1998) - IMDb',\n",
       "  \"This Boy's Life (1993) - IMDb\",\n",
       "  'Poison Ivy (1992) - IMDb',\n",
       "  'One Hundred and One Nights (1995) - IMDb',\n",
       "  'Dolores Claiborne (1995) - IMDb'],\n",
       " 'oscar': [<b>\n",
       "              Won\n",
       "              11\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Won\n",
       "              4\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Won\n",
       "              3\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Won\n",
       "              2\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              5\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              2\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Won\n",
       "              2\n",
       "              Oscars.\n",
       "          </b>, None, None, <b>\n",
       "              Won\n",
       "              4\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Won\n",
       "              5\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              10\n",
       "              Oscars.\n",
       "          </b>, None, <b>\n",
       "              Nominated for\n",
       "              5\n",
       "              Oscars.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              1\n",
       "              Oscar.\n",
       "          </b>, None, None, <b>\n",
       "              Nominated for\n",
       "              1\n",
       "              Golden Globe.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              3\n",
       "              Oscars.\n",
       "          </b>, None, <b>\n",
       "              Nominated for\n",
       "              1\n",
       "              Oscar.\n",
       "          </b>, <b>\n",
       "              Nominated for\n",
       "              1\n",
       "              Oscar.\n",
       "          </b>, None, None, None, None, None]}"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dicts_oscar"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
